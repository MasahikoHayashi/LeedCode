class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        m, n = len(s), len(p)
        dp = [[False] * (n + 1) for _ in range(m + 1)]
        dp[0][0] = True

        # DPテーブルの初期化（パターンが a*b* のように * で始まる場合）
        for j in range(1, n + 1):
            if p[j-1] == '*':
                dp[0][j] = dp[0][j-2]
        
        # DPテーブルを埋める
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if p[j-1] == '*':
                    # 0回マッチの場合、pの*とその前の文字をスキップ
                    dp[i][j] = dp[i][j-2] or (
                        # 1回以上マッチの場合、sの現在の文字が*の対象にマッチするか
                        (s[i-1] == p[j-2] or p[j-2] == '.') and dp[i-1][j]
                    )
                elif p[j-1] == '.' or p[j-1] == s[i-1]:
                    # 通常のマッチ
                    dp[i][j] = dp[i-1][j-1]

        return dp[m][n]
